# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to Google App Engine(Standard) when code is pushed to master branch
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google App Engine, including app.yaml, docker file to build image.
# 2. Set up secrets in your github repository: PROJECT_ID with the id of the project and GOOGLE_APPLICATION_CREDENTIALS with the JSON service account key created for your service account in your google cloud project.

name: Build and Deploy to GAE

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  GCP_PROJECT: ${{ secrets.PROJECT_ID }}
  SA_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
	- name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
	- name: Build with Maven
      run: mvn clean package
	  
    # Setup gcloud CLI
    - name: Setup gcloud CLI
	- uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: $SA_CREDENTIALS
        project_id: $GCP_PROJECT
        export_default_credentials: true 

    # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    
    # Build the Docker image
    - name: Build
      run: |-
        docker build --tag "gcr.io/$GCP_PROJECT/gcp-appengine" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$GCP_PROJECT/gcp-appengine"


    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        gcloud app deploy --quiet --version=java --project=$GCP_PROJECT --image-url=gcr.io/$G/gcp-appengine
